# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dev.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import os
import json
path = os.path.dirname(os.path.abspath(sys.argv[0]))

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1206, 893)
        MainWindow.setStyleSheet("background-color: rgb(36, 31, 49);\n"
"background-color: rgb(14, 14, 14);\n"
"color: rgb(198, 70, 0);\n"
"font: 11pt \"Ubuntu\";")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(0, 51))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        spacerItem = QtWidgets.QSpacerItem(17, 9, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.search = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.search.sizePolicy().hasHeightForWidth())
        self.search.setSizePolicy(sizePolicy)
        self.search.setStyleSheet("\n"
"font: 12pt \"Ubuntu Mono\";\n"
"color: rgb(222, 221, 218);\n"
"background-color: rgb(14, 14, 2);\n"
"selection-background-color: rgb(206, 92, 0);\n"
"selection-color: rgb(0, 0, 0);\n"
"border: 1px solid rgb(165, 29, 45)\n"
"")
        self.search.setAlignment(QtCore.Qt.AlignCenter)
        self.search.setObjectName("search")
        self.horizontalLayout.addWidget(self.search)
        self.bookmarks_count = QtWidgets.QLCDNumber(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bookmarks_count.sizePolicy().hasHeightForWidth())
        self.bookmarks_count.setSizePolicy(sizePolicy)
        self.bookmarks_count.setMinimumSize(QtCore.QSize(129, 77))
        self.bookmarks_count.setStyleSheet("border: 1px solid rgb(165, 29, 45)")
        self.bookmarks_count.setDigitCount(3)
        self.bookmarks_count.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.bookmarks_count.setObjectName("bookmarks_count")
        self.horizontalLayout.addWidget(self.bookmarks_count)
        self.verticalLayout.addLayout(self.horizontalLayout)
        spacerItem1 = QtWidgets.QSpacerItem(17, 9, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.location = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.location.sizePolicy().hasHeightForWidth())
        self.location.setSizePolicy(sizePolicy)
        self.location.setMinimumSize(QtCore.QSize(281, 38))
        self.location.setStyleSheet("\n"
"font: 12pt \"Ubuntu Mono\";\n"
"color: rgb(222, 221, 218);\n"
"background-color: rgb(14, 14, 2);\n"
"selection-background-color: rgb(206, 92, 0);\n"
"selection-color: rgb(0, 0, 0);\n"
"border: 1px solid rgb(165, 29, 45)\n"
"")
        self.location.setAlignment(QtCore.Qt.AlignCenter)
        self.location.setObjectName("location")
        self.horizontalLayout_2.addWidget(self.location)
        self.import_2 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.import_2.sizePolicy().hasHeightForWidth())
        self.import_2.setSizePolicy(sizePolicy)
        self.import_2.setMinimumSize(QtCore.QSize(0, 0))
        self.import_2.setStyleSheet("border: 1px solid rgb(165, 29, 45)")
        self.import_2.setFlat(True)
        self.import_2.setObjectName("import_2")
        self.horizontalLayout_2.addWidget(self.import_2)
        self.url = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.url.sizePolicy().hasHeightForWidth())
        self.url.setSizePolicy(sizePolicy)
        self.url.setMinimumSize(QtCore.QSize(278, 0))
        self.url.setStyleSheet("\n"
"font: 12pt \"Ubuntu Mono\";\n"
"color: rgb(222, 221, 218);\n"
"background-color: rgb(14, 14, 2);\n"
"selection-background-color: rgb(206, 92, 0);\n"
"selection-color: rgb(0, 0, 0);\n"
"border: 1px solid rgb(165, 29, 45)\n"
"")
        self.url.setAlignment(QtCore.Qt.AlignCenter)
        self.url.setObjectName("url")
        self.horizontalLayout_2.addWidget(self.url)
        self.add = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.add.sizePolicy().hasHeightForWidth())
        self.add.setSizePolicy(sizePolicy)
        self.add.setStyleSheet("border: 1px solid rgb(165, 29, 45)")
        self.add.setFlat(True)
        self.add.setObjectName("add")
        self.horizontalLayout_2.addWidget(self.add)
        self.status = QtWidgets.QLabel(self.centralwidget)
        self.status.setMinimumSize(QtCore.QSize(272, 0))
        self.status.setStyleSheet("font: 13pt \"Ubuntu Mono\";\n"
"color: rgb(229, 165, 10);\n"
"background-color: rgb(14, 14, 2);\n"
"selection-background-color: rgb(206, 92, 0);\n"
"selection-color: rgb(0, 0, 0);\n"
"border: 1px solid rgb(165, 29, 45)\n"
"")
        self.status.setText("")
        self.status.setAlignment(QtCore.Qt.AlignCenter)
        self.status.setObjectName("status")
        self.horizontalLayout_2.addWidget(self.status)
        self.delete_2 = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.delete_2.sizePolicy().hasHeightForWidth())
        self.delete_2.setSizePolicy(sizePolicy)
        self.delete_2.setStyleSheet("border: 1px solid rgb(165, 29, 45)")
        self.delete_2.setFlat(True)
        self.delete_2.setObjectName("delete_2")
        self.horizontalLayout_2.addWidget(self.delete_2)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        spacerItem2 = QtWidgets.QSpacerItem(17, 9, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem2)
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setStyleSheet("font: 18pt \"Ubuntu Mono\";\n"
"color: rgb(153, 163, 164 );\n"
"background-color: rgb(23, 32, 42 );\n"
"selection-background-color: rgb(206, 92, 0);\n"
"selection-color: rgb(0, 0, 0);\n"
"border: 1px solid rgb(165, 29, 45)\n"
"")
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout.addWidget(self.listWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.label.setText("<html><head/><body><p align=\"center\"><span style=\" font-size:18pt;\">           &lt; SIMPLE_|-|_ BOOKMARK_|-|_MANAGER /- &gt;     </span><span style=\" font-size:18pt; vertical-align:sub;\">[Developed By Sourish Datta]</span></p></body></html>")

        self.listWidget.setViewMode(QtWidgets.QListView.IconMode)
        self.listWidget.setUniformItemSizes(True)
        self.listWidget.setSpacing(20)

        self.listWidget.setResizeMode(QtWidgets.QListView.Adjust)
        path = os.path.dirname(os.path.abspath(sys.argv[0]))

        file = open(f"{path}/url_map.json", 'r')
        url_name_map =json.load(file)
        iconx = QtGui.QIcon()
        iconx.addPixmap(QtGui.QPixmap(f"{path}/bookmark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        count=0
        for i in url_name_map.keys():
            if i!="No BookMark Found!\nPlease import Bookmarks from exported browser file(Html)":
                count += 1
            self.label = QtWidgets.QListWidgetItem()
            self.label.setIcon(iconx)
            self.label.setText(i)
            self.listWidget.addItem(self.label)
        self.bookmarks_count.display(count)
        self.retranslateUi(MainWindow)
        self.listWidget.doubleClicked.connect(lambda : self.open_link(url_name_map))
        self.search.textChanged.connect(lambda : self.searchx(url_name_map,iconx))
        self.import_2.clicked.connect(lambda : self.import_func())
        self.add.clicked.connect(lambda : self.add_url())
        self.listWidget.itemSelectionChanged.connect(lambda : self.status.setText(self.listWidget.currentItem().text()))
        self.delete_2.clicked.connect(lambda : self.delete_url())
    def open_link(self,url_map):
        import webbrowser
        webbrowser.open_new_tab(url_map[self.listWidget.currentItem().text()])

    def import_func(self):
        locationx=self.location.text()
        file=open(f"{path}/url_map.json","r")
        url_map=json.load(file)
        file.close()
        try:
            file = open(f"{locationx}", 'r')
            data = file.readlines()
            lixt = []
            for i in data:
                x = i.split(" ")
                for j in x:
                    if "HREF=" in j:
                        lixt.append(j.replace("HREF=", "").replace('"',""))
            for i in lixt:
                if 'https://' in i:
                    x=i.replace('https://',"").split("/")[0]

                elif 'http://' in i:
                    x=i.replace('http://',"").split("/")[0]
                url_map[x]=i
            file=open(f"{path}/url_map.json","w")
            json.dump(url_map,file,indent=6)
            file.close()
            iconx = QtGui.QIcon()
            iconx.addPixmap(QtGui.QPixmap(f"{path}/bookmark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
            count = 0
            self.listWidget.clear()
            for i in url_map.keys():
                count += 1
                self.label = QtWidgets.QListWidgetItem()
                self.label.setIcon(iconx)
                self.label.setText(i)
                self.listWidget.addItem(self.label)
            self.bookmarks_count.display(count)
            self.status.setText("BookMarks imported!")
        except:
            self.status.setText("Import file location not found!")
    def delete_url(self):
        delete=self.listWidget.currentItem().text()

        file = open(f"{path}/url_map.json", "r")
        url_map = json.load(file)
        file.close()
        del url_map[delete]
        file = open(f"{path}/url_map.json", "w")
        json.dump(url_map, file, indent=6)
        file.close()
        iconx = QtGui.QIcon()
        iconx.addPixmap(QtGui.QPixmap(f"{path}/bookmark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        count = 0
        self.listWidget.clear()
        for i in url_map.keys():
            count += 1
            self.label = QtWidgets.QListWidgetItem()
            self.label.setIcon(iconx)
            self.label.setText(i)
            self.listWidget.addItem(self.label)
        self.bookmarks_count.display(count)
        self.status.setText(f"{delete} deleted!")
    def add_url(self):
        urlx=self.url.text()
        file = open(f"{path}/url_map.json", "r")
        url_map = json.load(file)
        file.close()
        if 'https://' in urlx:
            x = urlx.replace('https://', "").split("/")[0]

        elif 'http://' in urlx:
            x = urlx.replace('http://', "").split("/")[0]
        url_map[x] = urlx
        file = open(f"{path}/url_map.json", "w")
        json.dump(url_map, file, indent=6)
        file.close()
        iconx = QtGui.QIcon()
        iconx.addPixmap(QtGui.QPixmap(f"{path}/bookmark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        count = 0
        self.listWidget.clear()
        for i in url_map.keys():
            count += 1
            self.label = QtWidgets.QListWidgetItem()
            self.label.setIcon(iconx)
            self.label.setText(i)
            self.listWidget.addItem(self.label)
        self.bookmarks_count.display(count)
        self.status.setText("BookMark added!")
    def searchx(self,url_map,iconx):
        search=self.search.text()
        if search:
            count=0
            self.listWidget.clear()
            for i in url_map.keys():
                if search in i:
                    self.label = QtWidgets.QListWidgetItem()
                    self.label.setIcon(iconx)
                    self.label.setText(i)
                    self.listWidget.addItem(self.label)
                    count+=1
            self.bookmarks_count.display(count)
        else:
            count = 0
            self.listWidget.clear()
            for i in url_map.keys():
                self.label = QtWidgets.QListWidgetItem()
                self.label.setIcon(iconx)
                self.label.setText(i)
                self.listWidget.addItem(self.label)
                count+=1
            self.bookmarks_count.display(count)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Simple Bookmark Manager"))
        self.search.setPlaceholderText(_translate("MainWindow", "Search Bookmark"))
        self.location.setPlaceholderText(_translate("MainWindow", "Paste Html Location"))
        self.import_2.setText(_translate("MainWindow", "IMPORT"))
        self.url.setPlaceholderText(_translate("MainWindow", "Paste Url Here"))
        self.add.setText(_translate("MainWindow", "ADD"))
        self.delete_2.setText(_translate("MainWindow", "DELETE"))
def main():
 import sys
 app = QtWidgets.QApplication(sys.argv)
 w = QtWidgets.QMainWindow()
 ui = Ui_MainWindow()
 ui.setupUi(w)
 w.show()
 sys.exit(app.exec_())
main()